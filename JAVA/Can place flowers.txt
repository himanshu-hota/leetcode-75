// recursive

class Solution {

    public boolean solve(int arr[], int i, int x) {
        if (i >= arr.length) {
            return x <= 0;
        }

        if (x <= 0) {
            return true;
        }

        int n = arr.length;

        if (arr[i] == 0) {
            // Check if the current position is available
            boolean canPlaceHere = true;

            if ((i - 1 >= 0 && arr[i - 1] == 1) || (i + 1 < n && arr[i + 1] == 1)) {
                canPlaceHere = false;
            }

            if (canPlaceHere) {
                // Place a flower and move to the next available position
                return solve(arr, i + 2, x - 1);
            }
        }

        // Move to the next position without placing a flower
        return solve(arr, i + 1, x);
    }

    public boolean canPlaceFlowers(int[] flowerbed, int x) {
        return solve(flowerbed, 0, x);
    }
}


// iterative

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int i = 0;
        int len = flowerbed.length;

        while (i < len) {
            int curr = flowerbed[i];

            if (curr == 0) {
                boolean canPlace = true;

                // Check the previous and next positions
                if ((i - 1 >= 0 && flowerbed[i - 1] == 1) || (i + 1 < len && flowerbed[i + 1] == 1)) {
                    canPlace = false;
                }

                if (canPlace) {
                    n--;
                    i += 2; 
                    continue;
                }
            }

            if (n < 1) {
                break;
            }

            i++;
        }

        return n < 1;
    }
}

LeetCode : https://leetcode.com/problems/can-place-flowers/description/?envType=study-plan-v2&envId=leetcode-75